#pragma once#include <algorithm>#include <tinychain/tinychain.hpp>#include <sqlite3pp/sqlite3pp.h>#include <boost/filesystem.hpp>//#include <sqlite3pp/sqlite3ppext.h>namespace tinychain{class database{public:	database() {};	database(const database&) = default;	database(database&&) = default;	database& operator=(database&&) = default;	database& operator=(const database&) = default;	virtual void print();	virtual void create_genesis_block();	//建立数据库表项,不创立genesis block	void init();protected:	const char* db_name_ = "tinychain.db";};class chain_database : public database{public:	chain_database() {};	chain_database(const chain_database&) = default;	chain_database(chain_database&&) = default;	chain_database& operator=(chain_database&&) = default;	chain_database& operator=(const chain_database&) = default;	void print() {//待完善		//for (auto& each : queue_ ) {		//    log::info("block")<<each.to_string();		//};	}	void test();	// inesert block into database	void push(const block& newblock);	uint64_t height();	block get_last_block();	void create_genesis_block();	//验证区块，待完善	bool get_block(const sha256_t block_hash, block& b) {		return true;	}	//验证交易，待完善	bool get_tx(const sha256_t tx_hash, tx& t) {		return true;	}	virtual ~chain_database() {		db_conn_.disconnect();	}private:	//创建一个专属database,并连接	sqlite3pp::database db_conn_{ db_name_ };};// 相当于是本地钱包的私钥管理class key_pair_database:public database{public:    key_pair_database() {};    key_pair_database(const key_pair_database&)  = default;    key_pair_database(key_pair_database&&)  = default;    key_pair_database& operator=(key_pair_database&&)  = default;    key_pair_database& operator=(const key_pair_database&)  = default;    key_pair get_new_key_pair();    bool list_keys(Json::Value& root);	//bool push(key_pair& new_jey_pair);private:    sqlite3pp::database db_conn_{db_name_};};}